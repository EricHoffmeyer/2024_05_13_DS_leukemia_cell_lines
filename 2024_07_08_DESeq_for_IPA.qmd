---
title: "2024_07_08_DESeq_for_IPA"
format: html
editor: visual
---

# Background

Dallas wants to run IPA analysis on on the DE genes from each DS line patient vs cell line DESeq2 results. Each

Devon did this analysis, but I could only find it for DS1. He has DESeq results for DS1, but there are multiple versions. Looking at Devon's analyses, there are several options:

-   02_07
-   02_24
-   02_26
-   03_01
-   03_08
-   03_29
-   05_03

Each one of these dates has a file called "jones_ds_genes_ipa". They appear to be DESeq results. You can't run DESeq on a single sample, so they can't be pairwise comparisons, whatever they are.

Since I generated the counts matrix, I think I should run a pearson's correlation coefficient myself.

# Libraries

```{r}
suppressPackageStartupMessages({
library(tidyverse)
library(DESeq2)
library(AnnotationDbi)
library(org.Hs.eg.db)
library(mixOmics)
library(ggplot2)
library(ggrepel)
library(tidybulk)
library(GeneTonic)
})
```

# Directories

```{r}
# To store results of this notebook
result.dir <- "2024_07_08_results/"

if(!exists(result.dir)){
  dir.create(result.dir)}

# The folder with the gene count matrix
data.dir <- "2024_07_02_results/"
```

# Read in data

```{r}
counts.df <- read.csv(file = paste0(data.dir, "DS.CL.and.PT.counts.csv")) |> 
  dplyr::select(!X) |> 
  column_to_rownames("gene_symbol")

counts.df <- mutate(counts.df, Rowsum = apply(counts.df, 1, function(x) sum(x > 10))) %>% 
  ### All values must be more than 10 (set to x if only x value is satisfied)
  dplyr::filter(Rowsum == dim(metadata)[1]) %>% 
  ## No longer need the column "Rowsum", we can remove it
  dplyr::select(-Rowsum)

metadata <- read.csv(file = paste0(data.dir, "DS.CL.and.PT.metadata.csv")) |> 
  dplyr::select(!X)

colnames(counts.df) <- metadata$orig.name

```

# Create Summarized Experiment

```{r}
coldata <- data.frame(sample = metadata$orig.name,
                      condition = as.factor(metadata$sample),
                      row.names = "sample")

counts.matrix <- as.matrix(counts.df)
```

```{r}
se <- SummarizedExperiment(assays = list(counts = counts.matrix),
                                  colData = coldata)
se
```


```{r}
dds <- DESeqDataSet(se, design = ~ condition)

# Quick level check
levels(dds@colData$condition)
```

We want Pt as the reference, so let's relevel it

```{r}
relevel(dds@colData$condition, ref = "Pt")
```

# Run DESeq

```{r}
dds <-  DESeq(dds)

# Create a results table of our comparison of interest
res <- results(dds,
               contrast = c("condition", "Cell", "Pt"),
               alpha = 0.05)
```

I'm a little unsure of how the normalization worked, consider these samples were run separate and 4 are paired end and the other two are single end. Using plotMA to check if the normalized worked.

```{r}
DESeq2::plotMA(res)
```

That looks centered, so I believe the normalization went okay.

Let's look at the result dataframe

```{r}
res.df <- deseqresult2df(res, FDR = 0.05)

counts.df <- counts.df |> 
  rownames_to_column(var = "id")

res.df <- res.df |> 
  left_join(counts.df, by ="id")

write.csv(res.df, file = paste0(result.dir, "DESeq.CL.vs.Pt.csv"))
```


# PCA

Running PCA first to have as a reference

```{r}
pca.se <- se |> 
  tidybulk::keep_abundant() |>
  tidybulk::scale_abundance() |>
  tidybulk::reduce_dimensions(method = "PCA", .dims = 3)
```

```{r}
pca.df <- data.frame(colData(pca.se)) |> 
  tibble::rownames_to_column(var = "sample")

pca.df
```

```{r}
# options(ggrepel.max.overlaps = Inf)

pca.df |> 
  # tidybulk::pivot_sample() |> 
  ggplot(aes(x = PC1, y = PC2, colour = condition)) +
  geom_point() +
  geom_text_repel(aes(label = sample), show.legend = FALSE, size = 4)
```

# PLS-DA

Trying out this version. First, PCA in mixOmics:

```{r}
pca.temp <- counts.matrix |> 
  t() |> 
  pca(ncomp = 3, scale = T)

plotIndiv(pca.temp, group = metadata$patient, ind.names = F,
          legend = T)
```

Test run with srbct data

```{r}
data(srbct)
X <- srbct$gene
head(X)

# Outcome y that will be internally coded as dummy:
Y <- srbct$class 
dim(X); length(Y)
```

PCA with srbct data

```{r}
pca.srbct <- pca(X, ncomp = 3, scale = TRUE)

plotIndiv(pca.srbct, group = srbct$class, ind.names = FALSE,
          legend = TRUE, 
          title = 'SRBCT, PCA comp 1 - 2')
```


pls-da with srbct data

```{r}
plsda.srbct <- plsda(X,Y, ncomp = 10)

set.seed(30) # For reproducibility with this handbook, remove otherwise
perf.plsda.srbct <- perf(plsda.srbct, validation = 'Mfold', folds = 3, 
                  progressBar = FALSE,  # Set to TRUE to track progress
                  nrepeat = 10)         # We suggest nrepeat = 50

plot(perf.plsda.srbct, sd = TRUE, legend.position = 'horizontal')
```

```{r}
final.plsda.srbct <- plsda(X,Y, ncomp = 3)
```

```{r}
plotIndiv(final.plsda.srbct, ind.names = FALSE, legend=TRUE,
          comp=c(1,2), ellipse = TRUE, 
          title = 'PLS-DA on SRBCT comp 1-2',
          X.label = 'PLS-DA comp 1', Y.label = 'PLS-DA comp 2')
plotIndiv(final.plsda.srbct, ind.names = FALSE, legend=TRUE,
          comp=c(2,3), ellipse = TRUE, 
          title = 'PLS-DA on SRBCT comp 2-3',
          X.label = 'PLS-DA comp 2', Y.label = 'PLS-DA comp 3')
```

Dallas plsda

```{r}
# Counts matrix X
dallas.X <- counts.matrix |> 
  t()

dallas.Y <- as.factor(metadata$sample)

dallas.Y.2 <- as.factor(metadata$patient)
```


```{r}
dallas.srbct <- plsda(X,Y, ncomp = 10)
```

```{r}
set.seed(30) # For reproducibility with this handbook, remove otherwise
perf.dallas.srbct <- perf(dallas.srbct, validation = 'Mfold', folds = 3, 
                  progressBar = FALSE,  # Set to TRUE to track progress
                  nrepeat = 10)         # We suggest nrepeat = 50

plot(perf.dallas.srbct, sd = TRUE, legend.position = 'horizontal')
```
Again, 3 components looks about right

```{r}
final.plsda.srbct <- plsda(dallas.X, dallas.Y, ncomp = 3)

plotIndiv(final.plsda.srbct, ind.names = FALSE, legend=TRUE,
          comp=c(1,2), ellipse = TRUE, 
          title = 'PLS-DA on Cell-Pt comp 1-2',
          X.label = 'PLS-DA comp 1', Y.label = 'PLS-DA comp 2')
# plotIndiv(final.plsda.srbct, ind.names = FALSE, legend=TRUE,
#           comp=c(2,3), ellipse = TRUE, 
#           title = 'PLS-DA on Cell-Pt comp 2-3',
#           X.label = 'PLS-DA comp 2', Y.label = 'PLS-DA comp 3')
```

Save this plot

```{r}
png(filename = paste0(result.dir, "PLSDA.by.sample.png"),
    width = 8,
    height = 6,
    units = "in",
    res = 300)

plotIndiv(final.plsda.srbct, ind.names = FALSE, legend=TRUE,
          comp=c(1,2), ellipse = TRUE, 
          title = 'PLS-DA on Cell-Pt comp 1-2',
          X.label = 'PLS-DA comp 1', Y.label = 'PLS-DA comp 2')

dev.off()
```





```{r}
final.plsda.srbct.2 <- plsda(dallas.X, dallas.Y.2, ncomp = 3)

plotIndiv(final.plsda.srbct.2, ind.names = TRUE, legend = TRUE,
          comp=c(1,2), ellipse = TRUE, 
          title = 'PLS-DA on Patient comp 1-2',
          X.label = 'PLS-DA comp 1', Y.label = 'PLS-DA comp 2')
# plotIndiv(final.plsda.srbct.2, ind.names = FALSE, legend=TRUE,
#           comp=c(2,3), ellipse = TRUE, 
#           title = 'PLS-DA on Patient comp 2-3',
#           X.label = 'PLS-DA comp 2', Y.label = 'PLS-DA comp 3')
```

```{r}
png(filename = paste0(result.dir, "PLSDA.by.patient.png"),
    width = 8,
    height = 6,
    units = "in",
    res = 300)

plotIndiv(final.plsda.srbct.2, ind.names = TRUE, legend = TRUE,
          comp=c(1,2), ellipse = TRUE, 
          title = 'PLS-DA on Patient comp 1-2',
          X.label = 'PLS-DA comp 1', Y.label = 'PLS-DA comp 2')

dev.off()
```

### Custom graph for Dallas

Dallas wants the cell line vs patient sample graph

```{r}
final.plsda.srbct <- plsda(dallas.X, dallas.Y, ncomp = 3)
```

```{r}
png(filename = paste0(result.dir, "PLSDA.CL.vs.Pt.png"),
    width = 8,
    height = 6,
    units = "in",
    res = 300)

plotIndiv(final.plsda.srbct, ind.names = FALSE, legend=TRUE,
          comp=c(1, 2), ellipse = TRUE, 
          title = 'PLS-DA',
          X.label = 'PLS-DA comp 1', Y.label = 'PLS-DA comp 2')
dev.off()
```

```{r}
png(filename = paste0(result.dir, "PLSDA.sample.names.png"),
    width = 8,
    height = 6,
    units = "in",
    res = 300)

plotIndiv(final.plsda.srbct, ind.names = TRUE, legend=TRUE,
          comp=c(1,2), ellipse = F, 
          title = 'PLS-DA',
          X.label = 'PLS-DA comp 1', Y.label = 'PLS-DA comp 2')
dev.off()
```








